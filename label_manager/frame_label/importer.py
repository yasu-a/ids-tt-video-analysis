import codecs
import copy
import functools
import json
import os.path
from typing import NamedTuple, Literal

import app_logging
from . import common
from . import util
from .json_struct import LabelJsonMeta, LabelJsonFrames, LabelJson
from .. import common as manager_common

logger = app_logging.create_logger(__name__)


class VideoMarkerJsonV2:
    """
    A class which indicates a .json file generated by ids-tt-video-marker.
    json-version: 2
    """

    def __init__(self, json_root):
        self.__json_root = copy.deepcopy(json_root)

        self.__validate()
        self.__normalize_json_inplace()

    def __validate(self):
        meta = self.__json_root.get('meta')
        if meta is None:
            raise ValueError('invalid input json format: meta not found')
        version = meta.get('json-version')
        if version != 2:
            raise ValueError(
                'invalid input json format: incompatible version',
                version
            )
        return True

    def __normalize_json_inplace(self):
        self.__json_root['meta']['hash-digest'] \
            = util.json_to_md5_digest(self.__json_root['frames'])

    @functools.cached_property
    def meta(self) -> LabelJsonMeta:
        return LabelJsonMeta.from_json(self.__json_root['meta'])

    @functools.cached_property
    def frames(self):
        return LabelJsonFrames.from_json(self.__json_root['frames'])

    @classmethod
    def from_path(cls, json_path):
        with codecs.open(json_path, 'r', 'utf-8') as f:
            json_root = json.load(f)

        return cls(json_root)


class Importer:
    def __init__(self, source_data: VideoMarkerJsonV2):
        self.__source_data = source_data

    @functools.cached_property
    def output_json_name(self):
        s = self.__source_data
        return f'{s.meta.hash_digest}_{s.meta.author_hash_digest}.json'

    @functools.cached_property
    def output_json_path(self):
        return os.path.join(
            manager_common.resolve_data_path(
                common.data_root_path,
                self.__source_data.meta.video_name,
                self.output_json_name
            )
        )

    @functools.cached_property
    def total_json(self) -> LabelJson:
        return LabelJson(
            meta=self.__source_data.meta,
            frames=self.__source_data.frames
        )

    def import_(self) -> Literal['already-exists', 'imported']:
        if os.path.exists(self.output_json_path):
            return 'already-exists'

        os.makedirs(
            os.path.dirname(self.output_json_path),
            exist_ok=True
        )

        with open(self.output_json_path, 'w') as f:
            json.dump(self.total_json.to_json(), f, indent=2, sort_keys=True)
        return 'imported'


def import_jsons(*source_path_lst):
    for source_path in source_path_lst:
        logger.info(f'Processing: {source_path!r}')
        importer = Importer(
            VideoMarkerJsonV2.from_path(source_path)
        )
        logger.info(f' - as {importer.output_json_path!r}')
        result = importer.import_()
        logger.info(f'Finished: {result}')
